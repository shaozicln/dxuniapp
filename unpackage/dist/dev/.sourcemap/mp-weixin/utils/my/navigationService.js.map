{"version":3,"file":"navigationService.js","sources":["utils/my/navigationService.js"],"sourcesContent":["// 导航服务工具\nimport { navigateToWithLoading } from '../navigate/navigate';\n\nexport const navigationService = {\n  /**\n   * 跳转到个人信息编辑页\n   * @param {string} userRole - 用户角色\n   * @param {Object} userInfo - 用户信息对象\n   * @param {Array<string>} excludeFields - 需要排除的字段\n   * @returns {Promise<void>}\n   */\n  async goToProfileEdit(userRole, userInfo, excludeFields = []) {\n    if (userRole === '未登录') {\n      this.showToast('请先登录再编辑信息');\n      return;\n    }\n\n    try {\n      const userInfoStr = this.serializeUserInfo(userInfo, excludeFields);\n\n      const navigateOptions = {\n        loadingText: '加载编辑页...',\n        query: { userInfo: userInfoStr || '{}' },\n        onError: (err) => {\n          console.warn('跳转编辑页异常：', err);\n          this.showToast('跳转失败，请稍后重试');\n        },\n        success: () => {\n          console.log('跳转编辑页成功');\n        }\n      };\n\n      await navigateToWithLoading('/pages/personalMsg/personalMsg', navigateOptions);\n    } catch (err) {\n      console.error('跳转编辑页失败：', err.message || err);\n      this.showToast('系统异常，无法跳转');\n    }\n  },\n\n  /**\n   * 跳转到登录页\n   * @param {string} message - 提示消息\n   * @returns {Promise<void>}\n   */\n  async goToLogin(message = '身份加载失败，请重新登录') {\n    this.showToast(message, { duration: 3000 });\n    \n    await new Promise(resolve => setTimeout(resolve, 3000));\n    \n    uni.showModal({\n      title: '身份验证失败',\n      content: '是否前往登录页？',\n      showCancel: true,\n      cancelText: '取消',\n      confirmText: '去登录',\n      mask: true,\n      success: (res) => {\n        if (res.confirm) {\n          uni.hideModal();\n          navigateToWithLoading('/pages/login/login');\n        }\n      }\n    });\n  },\n\n  /**\n   * 序列化用户信息\n   * @param {Object} userInfo - 用户信息对象\n   * @param {Array<string>} excludeFields - 需要排除的字段\n   * @returns {string} 序列化后的字符串\n   */\n  serializeUserInfo(userInfo, excludeFields) {\n    try {\n      return JSON.stringify(userInfo, (key, value) => {\n        return excludeFields.includes(key) ? undefined : value;\n      });\n    } catch (stringifyErr) {\n      throw new Error(`用户信息序列化失败：${stringifyErr.message}`);\n    }\n  },\n\n  /**\n   * 显示提示消息\n   * @param {string} title - 消息内容\n   * @param {Object} options - 配置选项\n   */\n  showToast(title, options = {}) {\n    uni.showToast({\n      title,\n      icon: options.icon || 'none',\n      duration: options.duration || 2000,\n      mask: options.mask || true,\n      ...options\n    });\n  }\n};\n"],"names":["uni","navigateToWithLoading"],"mappings":";;;AAGY,MAAC,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ/B,MAAM,gBAAgB,UAAU,UAAU,gBAAgB,CAAA,GAAI;AAC5D,QAAI,aAAa,OAAO;AACtB,WAAK,UAAU,WAAW;AAC1B;AAAA,IACD;AAED,QAAI;AACF,YAAM,cAAc,KAAK,kBAAkB,UAAU,aAAa;AAElE,YAAM,kBAAkB;AAAA,QACtB,aAAa;AAAA,QACb,OAAO,EAAE,UAAU,eAAe,KAAM;AAAA,QACxC,SAAS,CAAC,QAAQ;AAChBA,wBAAa,MAAA,MAAA,QAAA,uCAAA,YAAY,GAAG;AAC5B,eAAK,UAAU,YAAY;AAAA,QAC5B;AAAA,QACD,SAAS,MAAM;AACbA,wBAAAA,MAAA,MAAA,OAAA,uCAAY,SAAS;AAAA,QACtB;AAAA,MACT;AAEM,YAAMC,wBAAqB,sBAAC,kCAAkC,eAAe;AAAA,IAC9E,SAAQ,KAAK;AACZD,gFAAc,YAAY,IAAI,WAAW,GAAG;AAC5C,WAAK,UAAU,WAAW;AAAA,IAC3B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,UAAU,UAAU,gBAAgB;AACxC,SAAK,UAAU,SAAS,EAAE,UAAU,IAAM,CAAA;AAE1C,UAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,GAAI,CAAC;AAEtDA,kBAAAA,MAAI,UAAU;AAAA,MACZ,OAAO;AAAA,MACP,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ;AAChB,YAAI,IAAI,SAAS;AACfA,wBAAG,MAAC,UAAS;AACbC,kCAAqB,sBAAC,oBAAoB;AAAA,QAC3C;AAAA,MACF;AAAA,IACP,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,kBAAkB,UAAU,eAAe;AACzC,QAAI;AACF,aAAO,KAAK,UAAU,UAAU,CAAC,KAAK,UAAU;AAC9C,eAAO,cAAc,SAAS,GAAG,IAAI,SAAY;AAAA,MACzD,CAAO;AAAA,IACF,SAAQ,cAAc;AACrB,YAAM,IAAI,MAAM,aAAa,aAAa,OAAO,EAAE;AAAA,IACpD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,UAAU,OAAO,UAAU,IAAI;AAC7BD,kBAAAA,MAAI,UAAU;AAAA,MACZ;AAAA,MACA,MAAM,QAAQ,QAAQ;AAAA,MACtB,UAAU,QAAQ,YAAY;AAAA,MAC9B,MAAM,QAAQ,QAAQ;AAAA,MACtB,GAAG;AAAA,IACT,CAAK;AAAA,EACF;AACH;;"}