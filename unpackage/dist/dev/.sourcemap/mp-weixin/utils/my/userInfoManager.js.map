{"version":3,"file":"userInfoManager.js","sources":["utils/my/userInfoManager.js"],"sourcesContent":["// 用户信息管理工具（依据 userInfoUtil 修正）\nexport const userInfoManager = {\n  /**\n   * 初始化用户信息（核心修正：对齐 userInfoUtil 的身份判定逻辑）\n   * @param {Object} reactiveUserInfo - 响应式用户信息对象\n   * @returns {Promise<boolean>} 初始化是否成功\n   */\n  async initUserInfo(reactiveUserInfo) {\n    try {\n      // 环境兼容性检查（保留原逻辑）\n      if (typeof uni === 'undefined' || !uni.getStorageSync || !uni.showToast) {\n        throw new Error('当前环境不支持UniApp核心API');\n      }\n\n      const storedUserInfo = uni.getStorageSync('userInfo');\n      console.log('读取到的本地用户信息：', storedUserInfo);\n\n      // 验证存储数据有效性（保留原逻辑）\n      if (!storedUserInfo || typeof storedUserInfo !== 'object' || Array.isArray(storedUserInfo)) {\n        console.warn('本地用户信息无效（非对象），使用默认值');\n        return false;\n      }\n\n      // 1. 合并存储数据到响应式对象（与 userInfoUtil 逻辑一致：空值不覆盖）\n      this.mergeUserInfo(reactiveUserInfo, storedUserInfo);\n      \n      // 2. 核心修正：按 userInfoUtil 规则推导身份（优先 userIdentity → 再按 ID 类型推断）\n      const derivedIdentity = this.deriveIdentity(storedUserInfo);\n      \n      // 3. 确保身份有效（基于推导结果验证，而非依赖初始值）\n      reactiveUserInfo.identity = this.getValidIdentity(derivedIdentity);\n      console.log('初始化后用户身份：', reactiveUserInfo.identity);\n      return true;\n    } catch (err) {\n      console.error('用户信息初始化异常：', err.message || err);\n      reactiveUserInfo.identity = '未登录';\n      return false;\n    }\n  },\n\n  /**\n   * 合并用户信息（与 userInfoUtil 逻辑完全对齐：空值不覆盖）\n   * @param {Object} target - 目标响应式对象\n   * @param {Object} source - 源数据对象（本地存储的 userInfo）\n   */\n  mergeUserInfo(target, source) {\n    Object.keys(target).forEach(key => {\n      // 仅当源数据字段非 undefined/空字符串/ null 时，才覆盖目标对象\n      if (source[key] !== undefined && source[key] !== '' && source[key] !== null) {\n        target[key] = source[key];\n      }\n    });\n  },\n\n  /**\n   * 新增：按 userInfoUtil 规则推导身份（核心逻辑对齐）\n   * @param {Object} storedUserInfo - 本地存储的用户信息\n   * @returns {string} 推导后的身份（领导/督导/教师/学生/未登录）\n   */\n  deriveIdentity(storedUserInfo) {\n    let identity = '未登录';\n    // 规则1：优先使用 storedUserInfo 中的 userIdentity 字段（与 userInfoUtil 一致）\n    if (typeof storedUserInfo.userIdentity === 'string' && storedUserInfo.userIdentity.trim() !== '') {\n      identity = storedUserInfo.userIdentity.trim();\n    } \n    // 规则2：无 userIdentity 时，按 ID 类型推断（与 userInfoUtil 一致）\n    else {\n      // 教师：teacherID 以 'Z' 开头\n      if (storedUserInfo.teacherID?.startsWith('Z')) {\n        identity = '教师';\n      } \n      // 学生：存在非空 studentID\n      else if (storedUserInfo.studentID && storedUserInfo.studentID.trim() !== '') {\n        identity = '学生';\n      }\n      // 注：若 storedUserInfo.userIdentity 是「领导/督导」，规则1已覆盖，无需额外推断\n    }\n    return identity;\n  },\n\n  /**\n   * 获取有效的用户身份（保留原逻辑，已包含「领导/督导」，无需修改）\n   * @param {string} identity - 推导后的身份标识\n   * @returns {string} 有效身份（无效值默认转为「未登录」）\n   */\n  getValidIdentity(identity) {\n    const validIdentities = ['领导', '督导', '教师', '学生', '未登录'];\n    return validIdentities.includes(identity?.toString() || '') \n      ? identity \n      : '未登录';\n  },\n\n  /**\n   * 新增：对齐 userInfoUtil 的 getIDLabel 方法（获取身份对应的编号标签）\n   * @param {string} identity - 用户身份（领导/督导/教师/学生）\n   * @returns {string} 编号标签（如「教工号」「学号」）\n   */\n  getIDLabel(identity) {\n    const labelMap = {\n      '教师': '教工号',\n      '学生': '学号',\n      '领导': '教工号', // 与 userInfoUtil 一致\n      '督导': '教工号'  // 与 userInfoUtil 一致\n    };\n    return labelMap[identity] || '编号';\n  },\n\n  /**\n   * 新增：对齐 userInfoUtil 的 getEditableFields 方法（获取可编辑字段）\n   * @param {string} identity - 用户身份（领导/督导/教师/学生）\n   * @returns {Array} 可编辑字段列表\n   */\n  getEditableFields(identity) {\n    const baseFields = [\n      { label: '性别', field: 'gender', type: 'select', options: ['男', '女', '保密'] },\n      { label: '学院', field: 'college', type: 'input', placeholder: '请输入学院名称' }\n    ];\n    // 学生额外增加「班级」「专业」字段（与 userInfoUtil 一致）\n    if (identity === '学生') {\n      return [\n        ...baseFields,\n        { label: '班级', field: 'className', type: 'input', placeholder: '请输入班级（如计科2301）' },\n        { label: '专业', field: 'major', type: 'input', placeholder: '请输入专业名称' }\n      ];\n    }\n    // 领导/督导/教师仅返回基础字段（与 userInfoUtil 一致）\n    return baseFields;\n  }\n};"],"names":["uni"],"mappings":";;AACY,MAAC,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM7B,MAAM,aAAa,kBAAkB;AACnC,QAAI;AAEF,UAAI,OAAOA,cAAG,UAAK,eAAe,CAACA,cAAG,MAAC,kBAAkB,CAACA,cAAG,MAAC,WAAW;AACvE,cAAM,IAAI,MAAM,oBAAoB;AAAA,MACrC;AAED,YAAM,iBAAiBA,cAAAA,MAAI,eAAe,UAAU;AACpDA,4EAAY,eAAe,cAAc;AAGzC,UAAI,CAAC,kBAAkB,OAAO,mBAAmB,YAAY,MAAM,QAAQ,cAAc,GAAG;AAC1FA,sBAAAA,MAAA,MAAA,QAAA,qCAAa,qBAAqB;AAClC,eAAO;AAAA,MACR;AAGD,WAAK,cAAc,kBAAkB,cAAc;AAGnD,YAAM,kBAAkB,KAAK,eAAe,cAAc;AAG1D,uBAAiB,WAAW,KAAK,iBAAiB,eAAe;AACjEA,oBAAY,MAAA,MAAA,OAAA,qCAAA,aAAa,iBAAiB,QAAQ;AAClD,aAAO;AAAA,IACR,SAAQ,KAAK;AACZA,8EAAc,cAAc,IAAI,WAAW,GAAG;AAC9C,uBAAiB,WAAW;AAC5B,aAAO;AAAA,IACR;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,cAAc,QAAQ,QAAQ;AAC5B,WAAO,KAAK,MAAM,EAAE,QAAQ,SAAO;AAEjC,UAAI,OAAO,GAAG,MAAM,UAAa,OAAO,GAAG,MAAM,MAAM,OAAO,GAAG,MAAM,MAAM;AAC3E,eAAO,GAAG,IAAI,OAAO,GAAG;AAAA,MACzB;AAAA,IACP,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,eAAe,gBAAgB;;AAC7B,QAAI,WAAW;AAEf,QAAI,OAAO,eAAe,iBAAiB,YAAY,eAAe,aAAa,KAAM,MAAK,IAAI;AAChG,iBAAW,eAAe,aAAa;IACxC,OAEI;AAEH,WAAI,oBAAe,cAAf,mBAA0B,WAAW,MAAM;AAC7C,mBAAW;AAAA,MACZ,WAEQ,eAAe,aAAa,eAAe,UAAU,KAAM,MAAK,IAAI;AAC3E,mBAAW;AAAA,MACZ;AAAA,IAEF;AACD,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,iBAAiB,UAAU;AACzB,UAAM,kBAAkB,CAAC,MAAM,MAAM,MAAM,MAAM,KAAK;AACtD,WAAO,gBAAgB,UAAS,qCAAU,eAAc,EAAE,IACtD,WACA;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,WAAW,UAAU;AACnB,UAAM,WAAW;AAAA,MACf,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA;AAAA,MACN,MAAM;AAAA;AAAA,IACZ;AACI,WAAO,SAAS,QAAQ,KAAK;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,kBAAkB,UAAU;AAC1B,UAAM,aAAa;AAAA,MACjB,EAAE,OAAO,MAAM,OAAO,UAAU,MAAM,UAAU,SAAS,CAAC,KAAK,KAAK,IAAI,EAAG;AAAA,MAC3E,EAAE,OAAO,MAAM,OAAO,WAAW,MAAM,SAAS,aAAa,UAAW;AAAA,IAC9E;AAEI,QAAI,aAAa,MAAM;AACrB,aAAO;AAAA,QACL,GAAG;AAAA,QACH,EAAE,OAAO,MAAM,OAAO,aAAa,MAAM,SAAS,aAAa,iBAAkB;AAAA,QACjF,EAAE,OAAO,MAAM,OAAO,SAAS,MAAM,SAAS,aAAa,UAAW;AAAA,MAC9E;AAAA,IACK;AAED,WAAO;AAAA,EACR;AACH;;"}