{"version":3,"file":"navigate.js","sources":["utils/navigate/navigate.ts"],"sourcesContent":["// 1. 只从 'uni-app' 导入需要的具体类型（无需导入整个 UniApp）\nimport type {\n  NavigateToOptions,\n  NavigateToOptionsFailCallbackResult,\n  NavigateToOptionsSuccessCallbackResult\n} from 'uni-app';\n\n// 2. 统一：只定义一个“导出接口”，避免局部/导出冲突\n// 扩展原生 NavigateToOptions，添加 loadingText（加载提示）和 onError（自定义错误回调）\nexport interface NavigateOptions extends NavigateToOptions {\n  loadingText?: string; // 可选：加载提示文本（默认“加载中...”）\n  onError?: (err: NavigateToOptionsFailCallbackResult) => void; // 可选：自定义错误回调\n}\n\n// 3. 唯一函数实现：保留错误处理更完善的版本（删除重复的 async 版本）\n// 函数返回值类型：明确为 Promise<NavigateToOptionsSuccessCallbackResult>（符合 uni.navigateTo 成功回调类型）\nexport function navigateToWithLoading(\n  url: string,\n  options: NavigateOptions = {} // 默认值避免无参数时的类型错误\n): Promise<NavigateToOptionsSuccessCallbackResult> {\n  // 显示加载提示（mask: true 防止用户误操作）\n  uni.showLoading({\n    title: options.loadingText || '加载中...',\n    mask: true\n  });\n\n  // 返回 Promise，便于外部用 async/await\n  return new Promise((resolve, reject) => {\n    uni.navigateTo({\n      url,\n      // 解构原生参数（如 query、events 等，继承自 NavigateToOptions）\n      ...options,\n      // 成功回调：隐藏加载+触发外部 success+resolve\n      success: (res) => {\n        uni.hideLoading();\n        options.success?.(res); // 触发外部传入的 success 回调\n        resolve(res); // Promise 成功决议\n      },\n      // 失败回调：隐藏加载+触发外部 onError/fail+reject\n      fail: (err) => {\n        uni.hideLoading();\n\n        // 优先触发自定义 onError 回调（外部可自定义错误提示）\n        if (options.onError) {\n          options.onError(err);\n        } else {\n          // 默认错误提示（覆盖常见场景）\n          const errorMap: Record<string, string> = {\n            'page not found': '页面不存在',\n            'timeout': '加载超时',\n            'can not redirectTo a tabbar page': '不能跳转到 tabbar 页面'\n          };\n          // 匹配错误信息，显示对应提示\n          const matchKey = Object.keys(errorMap).find(key => err.errMsg.includes(key)) || 'default';\n          uni.showToast({\n            title: errorMap[matchKey] || '跳转失败，请重试',\n            icon: 'none',\n            duration: 2500\n          });\n          console.error('跳转错误详情:', err);\n        }\n\n        options.fail?.(err); // 触发外部传入的 fail 回调\n        reject(err); // Promise 失败决议\n      }\n    });\n  });\n}"],"names":["uni"],"mappings":";;AAgBO,SAAS,sBACd,KACA,UAA2B,IACsB;AAEjDA,gBAAAA,MAAI,YAAY;AAAA,IACd,OAAO,QAAQ,eAAe;AAAA,IAC9B,MAAM;AAAA,EAAA,CACP;AAGD,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtCA,kBAAAA,MAAI,WAAW;AAAA,MACb;AAAA;AAAA,MAEA,GAAG;AAAA;AAAA,MAEH,SAAS,CAAC,QAAQ;;AAChBA,sBAAA,MAAI,YAAY;AAChB,sBAAQ,YAAR,iCAAkB;AAClB,gBAAQ,GAAG;AAAA,MACb;AAAA;AAAA,MAEA,MAAM,CAAC,QAAQ;;AACbA,sBAAA,MAAI,YAAY;AAGhB,YAAI,QAAQ,SAAS;AACnB,kBAAQ,QAAQ,GAAG;AAAA,QAAA,OACd;AAEL,gBAAM,WAAmC;AAAA,YACvC,kBAAkB;AAAA,YAClB,WAAW;AAAA,YACX,oCAAoC;AAAA,UAAA;AAGtC,gBAAM,WAAW,OAAO,KAAK,QAAQ,EAAE,KAAK,CAAO,QAAA,IAAI,OAAO,SAAS,GAAG,CAAC,KAAK;AAChFA,wBAAAA,MAAI,UAAU;AAAA,YACZ,OAAO,SAAS,QAAQ,KAAK;AAAA,YAC7B,MAAM;AAAA,YACN,UAAU;AAAA,UAAA,CACX;AACDA,wBAAA,MAAA,MAAA,SAAA,oCAAc,WAAW,GAAG;AAAA,QAC9B;AAEA,sBAAQ,SAAR,iCAAe;AACf,eAAO,GAAG;AAAA,MACZ;AAAA,IAAA,CACD;AAAA,EAAA,CACF;AACH;;"}