{"version":3,"file":"userInfoUtil.js","sources":["utils/personnalMsg/userInfoUtil.js"],"sourcesContent":["// 用户信息处理工具\nexport const userInfoUtil = {\n  initFromStorage(reactiveUserInfo) {\n    try {\n      const storedUserInfo = uni.getStorageSync('userInfo') || {};\n      // 合并本地存储数据到响应式对象（空值不覆盖）\n      Object.keys(reactiveUserInfo).forEach(key => {\n        if (storedUserInfo[key] !== undefined && storedUserInfo[key] !== '') {\n          reactiveUserInfo[key] = storedUserInfo[key];\n        }\n      });\n      // 自动判定身份（老师/学生）\n      reactiveUserInfo.identity = storedUserInfo.teacherID?.startsWith('Z') \n        ? '老师' \n        : (storedUserInfo.studentID ? '学生' : '未登录');\n      return reactiveUserInfo;\n    } catch (err) {\n      console.error('userInfoUtil: 初始化用户信息失败', err);\n      uni.showToast({ title: '信息加载失败', icon: 'none' });\n      return reactiveUserInfo;\n    }\n  },\n\n  generateInfoList(userInfo) {\n    let baseItems = [\n      { label: '姓名', value: userInfo.name, canEdit: false },\n      { label: '身份', value: userInfo.identity, canEdit: false },\n      { label: '性别', value: userInfo.gender, canEdit: true },\n      { label: '学院', value: userInfo.college, canEdit: true },\n      { \n        label: userInfo.identity === '老师' ? '教工号' : '学号', \n        value: userInfo.teacherID|| userInfo.studentID || '未设置', \n        canEdit: false \n      }\n    ];\n    // 学生额外显示班级、专业\n    if (userInfo.identity !== '老师') {\n      baseItems.splice(4, 0, \n        { label: '班级', value: userInfo.className, canEdit: true },\n        { label: '专业', value: userInfo.major, canEdit: true }\n      );\n    }\n    return baseItems;\n  },\n\n  getEditableFields(identity) {\n    const allFields = [\n      { label: '性别', field: 'gender', type: 'select', options: ['男', '女', '保密'] },\n      { label: '学院', field: 'college', type: 'input', placeholder: '请输入学院名称' },\n      { label: '班级', field: 'className', type: 'input', placeholder: '请输入班级（如计科2301）' },\n      { label: '专业', field: 'major', type: 'input', placeholder: '请输入专业名称' },\n    ];\n    return identity === '老师' \n      ? allFields.filter(f => !['班级', '专业'].includes(f.label)) \n      : allFields;\n  }\n};"],"names":["uni"],"mappings":";;AACY,MAAC,eAAe;AAAA,EAC1B,gBAAgB,kBAAkB;;AAChC,QAAI;AACF,YAAM,iBAAiBA,cAAG,MAAC,eAAe,UAAU,KAAK,CAAA;AAEzD,aAAO,KAAK,gBAAgB,EAAE,QAAQ,SAAO;AAC3C,YAAI,eAAe,GAAG,MAAM,UAAa,eAAe,GAAG,MAAM,IAAI;AACnE,2BAAiB,GAAG,IAAI,eAAe,GAAG;AAAA,QAC3C;AAAA,MACT,CAAO;AAED,uBAAiB,aAAW,oBAAe,cAAf,mBAA0B,WAAW,QAC7D,OACC,eAAe,YAAY,OAAO;AACvC,aAAO;AAAA,IACR,SAAQ,KAAK;AACZA,qFAAc,2BAA2B,GAAG;AAC5CA,oBAAG,MAAC,UAAU,EAAE,OAAO,UAAU,MAAM,OAAM,CAAE;AAC/C,aAAO;AAAA,IACR;AAAA,EACF;AAAA,EAED,iBAAiB,UAAU;AACzB,QAAI,YAAY;AAAA,MACd,EAAE,OAAO,MAAM,OAAO,SAAS,MAAM,SAAS,MAAO;AAAA,MACrD,EAAE,OAAO,MAAM,OAAO,SAAS,UAAU,SAAS,MAAO;AAAA,MACzD,EAAE,OAAO,MAAM,OAAO,SAAS,QAAQ,SAAS,KAAM;AAAA,MACtD,EAAE,OAAO,MAAM,OAAO,SAAS,SAAS,SAAS,KAAM;AAAA,MACvD;AAAA,QACE,OAAO,SAAS,aAAa,OAAO,QAAQ;AAAA,QAC5C,OAAO,SAAS,aAAY,SAAS,aAAa;AAAA,QAClD,SAAS;AAAA,MACV;AAAA,IACP;AAEI,QAAI,SAAS,aAAa,MAAM;AAC9B,gBAAU;AAAA,QAAO;AAAA,QAAG;AAAA,QAClB,EAAE,OAAO,MAAM,OAAO,SAAS,WAAW,SAAS,KAAM;AAAA,QACzD,EAAE,OAAO,MAAM,OAAO,SAAS,OAAO,SAAS,KAAM;AAAA,MAC7D;AAAA,IACK;AACD,WAAO;AAAA,EACR;AAAA,EAED,kBAAkB,UAAU;AAC1B,UAAM,YAAY;AAAA,MAChB,EAAE,OAAO,MAAM,OAAO,UAAU,MAAM,UAAU,SAAS,CAAC,KAAK,KAAK,IAAI,EAAG;AAAA,MAC3E,EAAE,OAAO,MAAM,OAAO,WAAW,MAAM,SAAS,aAAa,UAAW;AAAA,MACxE,EAAE,OAAO,MAAM,OAAO,aAAa,MAAM,SAAS,aAAa,iBAAkB;AAAA,MACjF,EAAE,OAAO,MAAM,OAAO,SAAS,MAAM,SAAS,aAAa,UAAW;AAAA,IAC5E;AACI,WAAO,aAAa,OAChB,UAAU,OAAO,OAAK,CAAC,CAAC,MAAM,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,IACrD;AAAA,EACL;AACH;;"}